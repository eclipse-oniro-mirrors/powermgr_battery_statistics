# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/components/idl_tool/idl.gni")
import("../batterystats.gni")

config("batterystats_public_config") {
  include_dirs = [
    "native/include",
    "${target_gen_dir}",
  ]
}

idl_gen_interface("batterystats_interface") {
  sources = [ "IBatteryStats.idl" ]
  configs = [
    "${batterystats_utils_path}:batterystats_utils_config",
    "${batterystats_utils_path}:coverage_flags",
  ]

  log_domainid = "0xD002962"
  log_tag = "StatsSvc"
  part_name = "${batterystats_part_name}"
  subsystem_name = "powermgr"
}

ohos_source_set("batterystats_proxy") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  output_values = get_target_outputs(":batterystats_interface")
  sources = filter_include(output_values, [ "*_proxy.cpp" ])
  public_configs = [ ":batterystats_public_config" ]
  configs = [
    "${batterystats_utils_path}:batterystats_utils_config",
    "${batterystats_utils_path}:coverage_flags",
  ]
  deps = [ ":batterystats_interface" ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]
  part_name = "${batterystats_part_name}"
  subsystem_name = "powermgr"
}

ohos_source_set("batterystats_stub") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  output_values = get_target_outputs(":batterystats_interface")
  sources = filter_include(output_values, [ "*_stub.cpp" ])
  sources +=
      [ "${batterystats_frameworks_path}/native/src/battery_stats_info.cpp" ]
  public_configs = [ ":batterystats_public_config" ]
  configs = [
    "${batterystats_utils_path}:batterystats_utils_config",
    "${batterystats_utils_path}:coverage_flags",
  ]
  deps = [ ":batterystats_interface" ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
    "ipc:ipc_single",
  ]

  if (has_batterystats_call_manager_part) {
    external_deps += [ "call_manager:tel_call_manager_api" ]
  }

  if (has_batterystats_display_manager_part) {
    external_deps += [ "display_manager:displaymgr" ]
  }
  external_deps += [ "ability_runtime:appkit_native" ]

  part_name = "${batterystats_part_name}"
  subsystem_name = "powermgr"
}

ohos_shared_library("batterystats_service") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  sources = [
    "native/src/battery_stats_core.cpp",
    "native/src/battery_stats_detector.cpp",
    "native/src/battery_stats_dumper.cpp",
    "native/src/battery_stats_listener.cpp",
    "native/src/battery_stats_parser.cpp",
    "native/src/battery_stats_service.cpp",
    "native/src/battery_stats_subscriber.cpp",
    "native/src/cpu_time_reader.cpp",
    "native/src/entities/alarm_entity.cpp",
    "native/src/entities/audio_entity.cpp",
    "native/src/entities/battery_stats_entity.cpp",
    "native/src/entities/bluetooth_entity.cpp",
    "native/src/entities/camera_entity.cpp",
    "native/src/entities/cpu_entity.cpp",
    "native/src/entities/flashlight_entity.cpp",
    "native/src/entities/gnss_entity.cpp",
    "native/src/entities/idle_entity.cpp",
    "native/src/entities/phone_entity.cpp",
    "native/src/entities/screen_entity.cpp",
    "native/src/entities/sensor_entity.cpp",
    "native/src/entities/uid_entity.cpp",
    "native/src/entities/user_entity.cpp",
    "native/src/entities/wakelock_entity.cpp",
    "native/src/entities/wifi_entity.cpp",
  ]

  configs = [
    "${batterystats_utils_path}:batterystats_utils_config",
    "${batterystats_utils_path}:coverage_flags",
  ]

  public_configs = [ ":batterystats_public_config" ]

  deps = [
    ":batterystats_stub",
    "${batterystats_inner_api}:batterystats_client",
    "${batterystats_utils_path}:batterystats_utils",
  ]

  external_deps = [ "power_manager:power_permission" ]
  external_deps += [
    "ability_base:want",
    "battery_manager:batterysrv_client",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisyseventmanager",
    "ipc:ipc_core",
    "jsoncpp:jsoncpp",
    "os_account:libaccountkits",
    "power_manager:power_sysparam",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  defines = []

  if (has_batterystats_bluetooth_part) {
    external_deps += [ "bluetooth:btframework" ]
  }

  if (has_batterystats_call_manager_part) {
    external_deps += [ "call_manager:tel_call_manager_api" ]
  }

  if (has_batterystats_config_policy_part) {
    defines += [ "HAS_BATTERYSTATS_CONFIG_POLICY_PART" ]
    external_deps += [ "config_policy:configpolicy_util" ]
  }

  if (has_batterystats_display_manager_part) {
    external_deps += [ "display_manager:displaymgr" ]
  }

  if (has_batterystats_wifi_part) {
    external_deps += [ "wifi:wifi_sdk" ]
  }
  if (false) {
    defines += [ "SYS_MGR_CLIENT_ENABLE" ]
    external_deps += [ "ability_runtime:appkit_native" ]
  }

  subsystem_name = "powermgr"
  part_name = "${batterystats_part_name}"
}

group("service") {
  deps = [
    ":batterystats_service",
    ":batterystats_stub",
    "profile:power_average.json",
  ]
}
